{"ast":null,"code":"import { HttpClient } from \"@angular/common/http\";\nimport { Router } from \"@angular/router\";\nimport { catchError, map, tap } from \"rxjs/operators\";\nimport { throwError, BehaviorSubject } from \"rxjs\";\nimport { User } from \"./user.model\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http, router) {\n      this.http = http;\n      this.router = router;\n      this.user = new BehaviorSubject(null);\n    }\n    signup(email, password) {\n      return this.http.post(\"https://www.googleapis.com/identitytoolkit/v3/relyingparty/signupNewUser?key=AIzaSyBJ0X7bjkGYZICe0d6pS21YAApDCfPNSE4\", {\n        email: email,\n        password: password,\n        returnSecureToken: true\n      }).pipe(catchError(this.handleError), tap(resData => {\n        this.handleAuthentication(resData.email, resData.localId, resData.idToken, +resData.expiresIn, false // Newly signed up users need to verify their email\n        );\n        this.sendEmailVerification(resData.idToken);\n      }));\n    }\n    login(email, password) {\n      return this.http.post(\"https://www.googleapis.com/identitytoolkit/v3/relyingparty/verifyPassword?key=AIzaSyDb0xTaRAoxyCgvaDF3kk5VYOsTwB_3o7Y\", {\n        email: email,\n        password: password,\n        returnSecureToken: true\n      }).pipe(catchError(this.handleError), tap(resData => {\n        this.isEmailVerified(resData.idToken).subscribe(emailVerified => {\n          this.handleAuthentication(resData.email, resData.localId, resData.idToken, +resData.expiresIn, emailVerified);\n          if (!emailVerified) {\n            console.log(\"Email not verified. Please check your inbox.\");\n          }\n        });\n      }));\n    }\n    autoLogin() {\n      const userData = JSON.parse(localStorage.getItem(\"userData\"));\n      if (!userData) {\n        return;\n      }\n      const loadedUser = new User(userData.email, userData.id, userData._token, new Date(userData._tokenExpirationDate), userData.emailVerified);\n      if (loadedUser.token) {\n        this.user.next(loadedUser);\n        const expirationDuration = new Date(userData._tokenExpirationDate).getTime() - new Date().getTime();\n        this.autoLogout(expirationDuration);\n      }\n    }\n    logout() {\n      this.user.next(null);\n      this.router.navigate([\"/auth\"]);\n      localStorage.removeItem(\"userData\");\n      if (this.tokenExpirationTimer) {\n        clearTimeout(this.tokenExpirationTimer);\n      }\n      this.tokenExpirationTimer = null;\n    }\n    autoLogout(expirationDuration) {\n      this.tokenExpirationTimer = setTimeout(() => {\n        this.logout();\n      }, expirationDuration);\n    }\n    handleAuthentication(email, userId, token, expiresIn, emailVerified) {\n      const expirationDate = new Date(new Date().getTime() + expiresIn * 1000);\n      const user = new User(email, userId, token, expirationDate, emailVerified);\n      this.user.next(user);\n      this.autoLogout(expiresIn * 1000);\n      localStorage.setItem(\"userData\", JSON.stringify(user));\n    }\n    sendEmailVerification(idToken) {\n      return this.http.post(`https://identitytoolkit.googleapis.com/v1/accounts:sendOobCode?key=AIzaSyBJ0X7bjkGYZICe0d6pS21YAApDCfPNSE4`, {\n        requestType: \"VERIFY_EMAIL\",\n        idToken: idToken\n      }).subscribe(response => {\n        console.log(\"Verification email sent\", response);\n      }, error => {\n        console.log(\"Error sending verification email\", error);\n      });\n    }\n    isEmailVerified(idToken) {\n      return this.http.post(`https://identitytoolkit.googleapis.com/v1/accounts:lookup?key=AIzaSyBJ0X7bjkGYZICe0d6pS21YAApDCfPNSE4`, {\n        idToken: idToken\n      }).pipe(map(response => response.users[0].emailVerified));\n    }\n    handleError(errorRes) {\n      let errorMessage = \"An unknown error occurred!\";\n      if (!errorRes.error || !errorRes.error.error) {\n        return throwError(errorMessage);\n      }\n      switch (errorRes.error.error.message) {\n        case \"EMAIL_EXISTS\":\n          errorMessage = \"This email exists already\";\n          break;\n        case \"EMAIL_NOT_FOUND\":\n          errorMessage = \"This email does not exist.\";\n          break;\n        case \"INVALID_PASSWORD\":\n          errorMessage = \"This password is not correct.\";\n          break;\n      }\n      return throwError(errorMessage);\n    }\n    static #_ = this.ɵfac = function AuthService_Factory(ɵt) {\n      return new (ɵt || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: \"root\"\n    });\n  }\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}